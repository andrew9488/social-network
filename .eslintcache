[{"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Dialogs\\Chat\\Chat.tsx":"1","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Dialogs\\Dialogs.tsx":"2","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Dialogs\\DialogsItem\\Dialog.tsx":"3","E:\\IT-incubator\\social-network-ts\\my-app\\src\\index.tsx":"4","E:\\IT-incubator\\social-network-ts\\my-app\\src\\App.tsx":"5","E:\\IT-incubator\\social-network-ts\\my-app\\src\\redux\\profilePageReducer.ts":"6","E:\\IT-incubator\\social-network-ts\\my-app\\src\\redux\\appReducer.ts":"7","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Navbar\\Navbar.tsx":"8","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Header\\HeaderContainer.tsx":"9","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\common\\Preloader\\Preloader.tsx":"10","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Header\\AppHeader.tsx":"11","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Users\\UsersContainer.tsx":"12","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Profile\\Profile.tsx":"13","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Login\\Login.tsx":"14","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Users\\User.tsx":"15","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\common\\SearchField\\SearchField.tsx":"16","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"17","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Dialogs\\DialogsItem\\Message.tsx":"18","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\common\\Form\\CustomField.tsx":"19","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Profile\\ProfileData\\ProfileForm.tsx":"20","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Profile\\ProfileData\\ProfileStatus.tsx":"21","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Profile\\ProfileImages\\ProfileImages.tsx":"22","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"23","E:\\IT-incubator\\social-network-ts\\my-app\\src\\redux\\redux-store.ts":"24","E:\\IT-incubator\\social-network-ts\\my-app\\src\\redux\\dialogsPageReducer.ts":"25","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Footer\\Footer.tsx":"26","E:\\IT-incubator\\social-network-ts\\my-app\\src\\utils\\objectHelpers.ts":"27","E:\\IT-incubator\\social-network-ts\\my-app\\src\\api\\api.ts":"28","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Users\\Users.tsx":"29","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx":"30","E:\\IT-incubator\\social-network-ts\\my-app\\src\\redux\\sidebarReducer.ts":"31","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Routes\\Routes.tsx":"32","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Login\\LoginContainer.tsx":"33","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Profile\\ProfileContainer.tsx":"34"},{"size":3185,"mtime":1627201930762,"results":"35","hashOfConfig":"36"},{"size":726,"mtime":1627152710975,"results":"37","hashOfConfig":"36"},{"size":1264,"mtime":1627152198305,"results":"38","hashOfConfig":"36"},{"size":725,"mtime":1619890141950,"results":"39","hashOfConfig":"36"},{"size":1629,"mtime":1626889650133,"results":"40","hashOfConfig":"36"},{"size":7749,"mtime":1620667558204,"results":"41","hashOfConfig":"36"},{"size":1347,"mtime":1619543507449,"results":"42","hashOfConfig":"36"},{"size":1387,"mtime":1626889650099,"results":"43","hashOfConfig":"36"},{"size":1016,"mtime":1626888519521,"results":"44","hashOfConfig":"36"},{"size":282,"mtime":1619545780228,"results":"45","hashOfConfig":"36"},{"size":1548,"mtime":1626889650314,"results":"46","hashOfConfig":"36"},{"size":2878,"mtime":1626977849176,"results":"47","hashOfConfig":"36"},{"size":1043,"mtime":1627198403694,"results":"48","hashOfConfig":"36"},{"size":829,"mtime":1627204577421,"results":"49","hashOfConfig":"36"},{"size":1915,"mtime":1627142756796,"results":"50","hashOfConfig":"36"},{"size":1101,"mtime":1627067390967,"results":"51","hashOfConfig":"36"},{"size":1224,"mtime":1619889773823,"results":"52","hashOfConfig":"36"},{"size":877,"mtime":1627201056103,"results":"53","hashOfConfig":"36"},{"size":1010,"mtime":1626892792757,"results":"54","hashOfConfig":"36"},{"size":2501,"mtime":1621089714449,"results":"55","hashOfConfig":"36"},{"size":1185,"mtime":1619199788424,"results":"56","hashOfConfig":"36"},{"size":699,"mtime":1627198403676,"results":"57","hashOfConfig":"36"},{"size":1042,"mtime":1627201103040,"results":"58","hashOfConfig":"36"},{"size":864,"mtime":1618921421331,"results":"59","hashOfConfig":"36"},{"size":1985,"mtime":1619368873581,"results":"60","hashOfConfig":"36"},{"size":424,"mtime":1626888938196,"results":"61","hashOfConfig":"36"},{"size":216,"mtime":1619380465091,"results":"62","hashOfConfig":"36"},{"size":3838,"mtime":1626717952788,"results":"63","hashOfConfig":"36"},{"size":3081,"mtime":1627063136463,"results":"64","hashOfConfig":"36"},{"size":1408,"mtime":1619892649027,"results":"65","hashOfConfig":"36"},{"size":227,"mtime":1614272662994,"results":"66","hashOfConfig":"36"},{"size":1069,"mtime":1627204592836,"results":"67","hashOfConfig":"36"},{"size":868,"mtime":1620668933192,"results":"68","hashOfConfig":"36"},{"size":2636,"mtime":1627204850499,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},"q4zwfm",{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"73"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"73"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Dialogs\\Chat\\Chat.tsx",["143"],"import React, {useCallback, useEffect, useRef, useState} from \"react\";\r\nimport {CommonForm, CommonFormPropsType} from \"../../common/Form/CommonForm\";\r\nimport style from \"./Chat.module.css\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {reset} from \"redux-form\";\r\n\r\ntype ChatMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\ntype StatusType = \"pending\" | \"ready\"\r\n\r\nexport const Chat: React.FC = React.memo(() => {\r\n\r\n    const [wsChannel, setWsChannel] = useState<WebSocket | null>(null)\r\n    const [messages, setMessages] = useState<Array<ChatMessageType>>([])\r\n    const [status, setStatus] = useState<StatusType>(\"pending\")\r\n    const messagesEndRef = useRef<null | HTMLDivElement>(null)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        let ws: WebSocket\r\n        const closeWebSocket = () => {\r\n            setTimeout(openWebSocket, 3000)\r\n        }\r\n\r\n        function openWebSocket() {\r\n            ws?.removeEventListener(\"close\", closeWebSocket)\r\n            ws?.close()\r\n            ws = new WebSocket(\"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\")\r\n            ws.addEventListener(\"close\", closeWebSocket)\r\n            setWsChannel(ws)\r\n        }\r\n\r\n        openWebSocket()\r\n        return () => {\r\n            ws.removeEventListener(\"close\", closeWebSocket)\r\n            ws.close()\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const messageHandler = (e: MessageEvent) => {\r\n            const newMessages = JSON.parse(e.data)\r\n            setMessages((prevState => [...prevState, ...newMessages]))\r\n        }\r\n        wsChannel?.addEventListener(\"message\", messageHandler)\r\n        return () => {\r\n            wsChannel?.removeEventListener(\"message\", messageHandler)\r\n        }\r\n    }, [wsChannel])\r\n\r\n    useEffect(() => {\r\n        const statusHandler = () => {\r\n            setStatus(\"ready\")\r\n        }\r\n        wsChannel?.addEventListener(\"open\", statusHandler)\r\n        return () => {\r\n            wsChannel?.removeEventListener(\"open\", statusHandler)\r\n        }\r\n    }, [wsChannel])\r\n\r\n    const sendChatMessage = useCallback((text: CommonFormPropsType) => {\r\n        wsChannel?.send(text.newText)\r\n        dispatch(reset(\"formForSendNewText\"))\r\n    }, [wsChannel])\r\n\r\n\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({behavior: 'smooth'});\r\n    }, [messages])\r\n\r\n\r\n    return (\r\n        <div className={style.chatContainer}>\r\n            <div className={style.chatBlock}>\r\n                {messages.map((mes, index) => {\r\n                    return <ChatMessages key={index + mes.userId} message={mes}/>\r\n                })}\r\n                <div ref={messagesEndRef}/>\r\n            </div>\r\n            <CommonForm disable={wsChannel === null || status !== \"ready\"} onSubmit={sendChatMessage}/>\r\n        </div>\r\n    );\r\n})\r\n\r\nconst ChatMessages: React.FC<{ message: ChatMessageType }> = ({message}) => {\r\n\r\n    return (\r\n        <div>\r\n            <img src={message.photo} alt=\"userPhoto\" style={{width: \"30px\"}}/> <b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    );\r\n}",["144","145"],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Dialogs\\Dialogs.tsx",[],["146","147"],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Dialogs\\DialogsItem\\Dialog.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\index.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\App.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\redux\\profilePageReducer.ts",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\redux\\appReducer.ts",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Navbar\\Navbar.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Header\\HeaderContainer.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\common\\Preloader\\Preloader.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Header\\AppHeader.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Users\\UsersContainer.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Profile\\Profile.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Login\\Login.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Users\\User.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\common\\SearchField\\SearchField.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Dialogs\\DialogsItem\\Message.tsx",["148"],"import style from \"./Message.module.css\";\r\nimport React, {useCallback} from \"react\";\r\nimport {MessagePropsType} from \"./MessageContainer\";\r\nimport {CommonForm, CommonFormPropsType} from \"../../common/Form/CommonForm\";\r\nimport {reset} from \"redux-form\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport const Message: React.FC<MessagePropsType> = React.memo((props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const sendMessageText = useCallback((text: CommonFormPropsType) => {\r\n        props.sendMessage(text.newText)\r\n        dispatch(reset(\"formForSendNewText\"))\r\n    }, [props])\r\n\r\n    return (\r\n        <div className={style.message}>\r\n            <div className={style.messageText}>\r\n                {props.messages.map(m => <div key={m.id}>{m.message}</div>)}\r\n            </div>\r\n            <CommonForm onSubmit={sendMessageText}/>\r\n        </div>\r\n    );\r\n})","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\common\\Form\\CustomField.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Profile\\ProfileData\\ProfileForm.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Profile\\ProfileData\\ProfileStatus.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Profile\\ProfileImages\\ProfileImages.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",["149"],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\redux\\redux-store.ts",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\redux\\dialogsPageReducer.ts",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Footer\\Footer.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\utils\\objectHelpers.ts",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\api\\api.ts",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Users\\Users.tsx",["150","151"],"import React, {useEffect} from \"react\";\r\nimport style from \"./Users.module.css\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {UsersPropsType} from \"./UsersContainer\";\r\nimport {User} from \"./User\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\nimport {SearchField} from \"../common/SearchField/SearchField\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {PATH} from \"../Routes/Routes\";\r\nimport * as querystring from \"querystring\";\r\n\r\ntype QueryObjType = { term?: string, friend?: string, page?: string }\r\nexport const Users: React.FC<UsersPropsType> = React.memo((props) => {\r\n\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = querystring.parse(history.location.search.substr(1)) as QueryObjType\r\n        let actualPage = props.currentPage\r\n        let actualTerm = props.term !== null ? props.term : \"\"\r\n        let actualFriend = props.friend\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n        if (!!parsed.term) actualTerm = parsed.term\r\n        // parsed.term !== \"null\" ? actualTerm = parsed.term as string : actualTerm = \"\"\r\n\r\n        switch (parsed.friend) {\r\n            case \"null\":\r\n                actualFriend = null\r\n                break\r\n            case \"true\":\r\n                actualFriend = true\r\n                break\r\n            case \"false\":\r\n                actualFriend = false\r\n                break\r\n        }\r\n        props.getUsersTC(actualPage, props.pageSize, actualTerm, actualFriend)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryObjType = {}\r\n        if (!!props.term) query.term = props.term\r\n        if (props.friend !== null) query.friend = String(props.friend)\r\n        if (props.currentPage !== 1) query.page = String(props.currentPage)\r\n\r\n        history.push({\r\n            pathname: PATH.USERS,\r\n            search: querystring.stringify(query)\r\n        })\r\n    }, [props.term, props.friend, props.currentPage])\r\n\r\n    return (\r\n        <div className={style.usersPage}>\r\n            <SearchField getUsers={props.getUsersTC}\r\n                         pageSize={props.pageSize}\r\n                         term={props.term}\r\n                         friend={props.friend}\r\n            />\r\n            <Paginator totalCount={props.totalCount}\r\n                       pageSize={props.pageSize}\r\n                       onClickCurrentPage={props.onClickCurrentPage}\r\n                       currentPage={props.currentPage}/>\r\n            {props.isFetching ? <Preloader/>\r\n                : <div className={style.container}>\r\n                    {\r\n                        props.usersPage.map(u => <User key={u.id}\r\n                                                       user={u}\r\n                                                       followingInProgress={props.followingInProgress}\r\n                                                       followTC={props.followTC}\r\n                                                       unFollowTC={props.unFollowTC}/>)\r\n                    }\r\n                </div>}\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n","E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\redux\\sidebarReducer.ts",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Routes\\Routes.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Login\\LoginContainer.tsx",[],"E:\\IT-incubator\\social-network-ts\\my-app\\src\\components\\Profile\\ProfileContainer.tsx",[],{"ruleId":"152","severity":1,"message":"153","line":69,"column":8,"nodeType":"154","endLine":69,"endColumn":19,"suggestions":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"156","replacedBy":"160"},{"ruleId":"158","replacedBy":"161"},{"ruleId":"152","severity":1,"message":"153","line":15,"column":8,"nodeType":"154","endLine":15,"endColumn":15,"suggestions":"162"},{"ruleId":"152","severity":1,"message":"153","line":17,"column":8,"nodeType":"154","endLine":17,"endColumn":15,"suggestions":"163"},{"ruleId":"152","severity":1,"message":"164","line":39,"column":8,"nodeType":"154","endLine":39,"endColumn":10,"suggestions":"165"},{"ruleId":"152","severity":1,"message":"166","line":51,"column":8,"nodeType":"154","endLine":51,"endColumn":53,"suggestions":"167"},"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["168"],"no-native-reassign",["169"],"no-negated-in-lhs",["170"],["169"],["170"],["171"],["172"],"React Hook useEffect has missing dependencies: 'history.location.search' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["173"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["174"],{"desc":"175","fix":"176"},"no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},{"desc":"177","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},"Update the dependencies array to be: [dispatch, wsChannel]",{"range":"184","text":"185"},"Update the dependencies array to be: [dispatch, props]",{"range":"186","text":"187"},{"range":"188","text":"187"},"Update the dependencies array to be: [history.location.search, props]",{"range":"189","text":"190"},"Update the dependencies array to be: [props.term, props.friend, props.currentPage, history]",{"range":"191","text":"192"},[2278,2289],"[dispatch, wsChannel]",[583,590],"[dispatch, props]",[608,615],[1519,1521],"[history.location.search, props]",[1919,1964],"[props.term, props.friend, props.currentPage, history]"]