{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogsItem/Dialog.module.css","components/Dialogs/DialogsItem/Message.module.css","components/Dialogs/Chat/Chat.module.css","components/Dialogs/DialogsItem/Dialog.tsx","components/Dialogs/DialogsItem/DialogContainer.tsx","components/Dialogs/DialogsItem/Message.tsx","components/Dialogs/DialogsItem/MessageContainer.tsx","components/Dialogs/Chat/Chat.tsx","components/Dialogs/Dialogs.tsx"],"names":["module","exports","Dialog","React","memo","props","className","style","dialog","dialogs","map","d","dialogItemContainer","to","PATH","DIALOGS","id","activeClassName","activeLink","dialogItem","src","img","alt","name","CHAT","photo","compose","connect","state","dialogsPage","withAuthRedirect","Message","dispatch","useDispatch","sendMessageText","useCallback","text","sendMessage","newText","reset","message","messageText","messages","m","CommonForm","onSubmit","Chat","useSelector","chat","status","messagesEndRef","useRef","useState","isAutoScroll","setIsAutoScroll","useEffect","startMessagesListeningTC","stopMessagesListeningTC","current","scrollIntoView","behavior","sendChatMessage","sendMessageChatTC","chatContainer","chatBlock","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","mes","index","userId","ref","color","disable","ChatMessages","width","userName","Dialogs","history","useHistory","DialogContainer","location","pathname","MessageContainer"],"mappings":"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","file":"static/js/4.66452f5f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__FhxYh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__vfZZh\",\"dialogItemContainer\":\"Dialog_dialogItemContainer__3oAht\",\"activeLink\":\"Dialog_activeLink__3wrI0\",\"dialogItem\":\"Dialog_dialogItem__3A0vj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__NMOAK\",\"messageText\":\"Message_messageText__215RR\",\"sendMessageButton\":\"Message_sendMessageButton__2mVJZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatContainer\":\"Chat_chatContainer__1trV7\",\"chatBlock\":\"Chat_chatBlock__1bCO1\"};","import style from \"./Dialog.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {DialogPropsType} from \"./DialogContainer\";\r\nimport {PATH} from \"../../Routes/Routes\";\r\nimport photo from \"./../../../assets/images/avatars/city-Z.png\";\r\n\r\nexport const Dialog: React.FC<DialogPropsType> = React.memo((props) => {\r\n\r\n    return (\r\n        <div className={style.dialog}>\r\n            {props.dialogs.map(d => <div className={style.dialogItemContainer} key={d.id}>\r\n                <NavLink to={`${PATH.DIALOGS}/${d.id}`} activeClassName={style.activeLink}>\r\n                    <div className={style.dialogItem}>\r\n                        <img src={d.img} alt=\"avatar\"/>\r\n                        <span>{d.name}</span>\r\n                    </div>\r\n                </NavLink>\r\n            </div>)}\r\n            <div className={style.dialogItemContainer}>\r\n                <NavLink to={`${PATH.DIALOGS}${PATH.CHAT}`} activeClassName={style.activeLink}>\r\n                    <div className={style.dialogItem}>\r\n                        <img src={photo} alt=\"city-Z\"/>\r\n                        <span>Polesye National Republic</span>\r\n                    </div>\r\n                </NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n","import {Dialog} from \"./Dialog\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {DialogType} from \"../../../redux/dialogsPageReducer\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport { ComponentType } from \"react\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogs: Array<DialogType>\r\n}\r\n\r\ntype MapDispatchPropsType = {}\r\n\r\nexport type DialogPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n    }\r\n}\r\n\r\n\r\nexport default compose<ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {}),\r\n    withAuthRedirect)(Dialog)\r\n","import style from \"./Message.module.css\";\r\nimport React, {useCallback} from \"react\";\r\nimport {MessagePropsType} from \"./MessageContainer\";\r\nimport {CommonForm, CommonFormPropsType} from \"../../common/Form/CommonForm\";\r\nimport {reset} from \"redux-form\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport const Message: React.FC<MessagePropsType> = React.memo((props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const sendMessageText = useCallback((text: CommonFormPropsType) => {\r\n        props.sendMessage(text.newText)\r\n        dispatch(reset(\"formForSendNewText\"))\r\n    }, [props])\r\n\r\n    return (\r\n        <div className={style.message}>\r\n            <div className={style.messageText}>\r\n                {props.messages.map(m => <div key={m.id}>{m.message}</div>)}\r\n            </div>\r\n            <CommonForm onSubmit={sendMessageText}/>\r\n        </div>\r\n    );\r\n})","import {Message} from \"./Message\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {DialogsPageReducerActionsType, MessageType, sendMessage,} from \"../../../redux/dialogsPageReducer\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {ComponentType} from \"react\";\r\n\r\ntype MapStatePropsType = {\r\n    messages: Array<MessageType>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (text: string) => void\r\n}\r\n\r\nexport type MessagePropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        messages: state.dialogsPage.messages,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<DialogsPageReducerActionsType>): MapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (text: string) => {\r\n            dispatch(sendMessage(text))\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect)(Message)\r\n","import React, {useCallback, useEffect, useRef, useState} from \"react\";\r\nimport {CommonForm, CommonFormPropsType} from \"../../common/Form/CommonForm\";\r\nimport style from \"./Chat.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {reset} from \"redux-form\";\r\nimport {ChatMessageType, StatusType} from \"../../../api/chat-api\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {sendMessageChatTC, startMessagesListeningTC, stopMessagesListeningTC} from \"../../../redux/chatReducer\";\r\n\r\nexport const Chat: React.FC = React.memo(() => {\r\n\r\n    const messages = useSelector<AppStateType, Array<ChatMessageType>>(state => state.chat.messages)\r\n    const status = useSelector<AppStateType, StatusType>(state => state.chat.status)\r\n    const messagesEndRef = useRef<null | HTMLDivElement>(null)\r\n    const dispatch = useDispatch()\r\n\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListeningTC())\r\n        return () => {\r\n            dispatch(stopMessagesListeningTC())\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesEndRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n\r\n    const sendChatMessage = useCallback((text: CommonFormPropsType) => {\r\n        dispatch(sendMessageChatTC(text.newText))\r\n        dispatch(reset(\"formForSendNewText\"))\r\n    }, [])\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        let element = e.currentTarget\r\n        if ((Math.abs(element.scrollHeight - element.scrollTop) - element.clientHeight) < 10) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.chatContainer}>\r\n            <div className={style.chatBlock} onScroll={scrollHandler}>\r\n                {messages.map((mes, index) => {\r\n                    return <ChatMessages key={index + mes.userId} message={mes}/>\r\n                })}\r\n                <div ref={messagesEndRef}/>\r\n            </div>\r\n            {status === \"error\" && <span style={{color: \"red\"}}>some error</span>}\r\n            <CommonForm disable={status !== \"ready\"} onSubmit={sendChatMessage}/>\r\n        </div>\r\n    );\r\n})\r\n\r\nconst ChatMessages: React.FC<{ message: ChatMessageType }> = ({message}) => {\r\n\r\n    return (\r\n        <div>\r\n            <img src={message.photo} alt=\"userPhoto\" style={{width: \"30px\"}}/> <b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport style from \"./Dialogs.module.css\";\r\nimport DialogContainer from \"./DialogsItem/DialogContainer\";\r\nimport MessageContainer from \"./DialogsItem/MessageContainer\";\r\nimport {PATH} from \"../Routes/Routes\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {Chat} from \"./Chat/Chat\";\r\n\r\nconst Dialogs: React.FC = React.memo(() => {\r\n\r\n    const history = useHistory()\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div>\r\n                <DialogContainer/>\r\n            </div>\r\n            {history.location.pathname === `${PATH.DIALOGS}${PATH.CHAT}`\r\n                ? <Chat/>\r\n                : <MessageContainer/>}\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Dialogs;"],"sourceRoot":""}