{"version":3,"sources":["components/Users/Users.module.css","components/Users/User.module.css","components/common/Paginator/Paginator.module.css","components/Users/User.tsx","components/common/Paginator/Paginator.tsx","components/common/SearchField/SearchField.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx"],"names":["module","exports","User","React","memo","props","className","style","user","userAvatar","to","PATH","PROFILE","id","src","photos","small","UsersPhoto","alt","userData","name","status","followed","disabled","followingInProgress","some","onClick","unFollowTC","followTC","Paginator","useState","portionNumber","setPortionNumber","countPage","Math","ceil","totalCount","pageSize","pages","i","push","portionCount","leftPortionPageNumber","rightPortionPageNumber","paginator","filter","p","map","index","onClickCurrentPage","currentPage","SearchField","enableReinitialize","initialValues","term","friend","onSubmit","values","getUsers","type","autoComplete","as","value","Users","history","useHistory","useEffect","parsed","querystring","location","search","substr","actualPage","actualTerm","actualFriend","page","Number","getUsersTC","query","String","pathname","USERS","usersPage","isFetching","Preloader","container","u","UsersContainer","this","Fragment","PureComponent","compose","connect","state","users","disableButton","withAuthRedirect"],"mappings":"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","file":"static/js/5.69f4820a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPage\":\"Users_usersPage__3EiO7\",\"container\":\"Users_container__1wJvV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"User_user__u-ni-\",\"userAvatar\":\"User_userAvatar__2YTUN\",\"userData\":\"User_userData__15nCn\",\"name\":\"User_name__32ePm\",\"status\":\"User_status__2z335\",\"location\":\"User_location__1EDt4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__2h5rT\",\"currentPage\":\"Paginator_currentPage__2jLvZ\"};","import {UserType} from \"../../redux/usersPageReducer\";\r\nimport React from \"react\";\r\nimport style from \"./User.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport UsersPhoto from \"../../assets/images/avatars/usersAvatar.jpg\";\r\nimport {PATH} from \"../Routes/Routes\";\r\n\r\ntype UserPropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    followTC: (userId: number) => void\r\n    unFollowTC: (userId: number) => void\r\n}\r\nexport const User: React.FC<UserPropsType> = React.memo((props) => {\r\n\r\n    return (\r\n        <div className={style.user}>\r\n            <div className={style.userAvatar}>\r\n                <NavLink to={`${PATH.PROFILE}/${props.user.id}`}>\r\n                    <img src={props.user.photos.small !== null ? props.user.photos.small : UsersPhoto}\r\n                         alt=\"avatar\"/>\r\n                </NavLink>\r\n            </div>\r\n            <div className={style.userData}>\r\n                <span className={style.name}>{props.user.name}</span>\r\n                <span\r\n                    className={style.status}>{props.user.status !== null ? props.user.status : \"I have not status\"}</span>\r\n            </div>\r\n            <div>\r\n                {\r\n                    !props.user.followed\r\n                        ? <button disabled={props.followingInProgress.some(id => id === props.user.id)}\r\n                                  onClick={() => {\r\n                                      props.followTC(props.user.id)\r\n                                  }}>follow</button>\r\n                        : <button disabled={props.followingInProgress.some(id => id === props.user.id)}\r\n                                  onClick={() => {\r\n                                      props.unFollowTC(props.user.id)\r\n                                  }}>unfollow</button>\r\n                }\r\n                <button>message</button>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useState} from \"react\";\r\nimport style from \"./Paginator.module.css\";\r\n\r\ntype PaginatorPropsType = {\r\n    totalCount: number\r\n    pageSize: number\r\n    onClickCurrentPage: (page: number) => void\r\n    currentPage: number\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorPropsType> = React.memo((props) => {\r\n\r\n    const [portionNumber, setPortionNumber] = useState<number>(1)\r\n\r\n    let countPage = Math.ceil(props.totalCount / props.pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= countPage; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionSize = 10;\r\n    let portionCount = Math.ceil((countPage / portionSize))\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <div className={style.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => setPortionNumber(portionNumber - 1)}>{`<`}</button>}\r\n            {pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p, index) => {\r\n                    return <span key={index} onClick={() => {\r\n                        props.onClickCurrentPage(p)\r\n                    }}\r\n                                 className={props.currentPage === p ? style.currentPage : ''}>{p}</span>\r\n                })}\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => setPortionNumber(portionNumber + 1)}>{`>`}</button>}\r\n        </div>\r\n    )\r\n})\r\n","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\n\r\ntype SearchFieldPropsType = {\r\n    getUsers: (currentPage: number, pageSize: number, term: string | null, friend: null | boolean) => void\r\n    pageSize: number\r\n    term: null | string\r\n    friend: null | boolean\r\n}\r\n\r\nexport const SearchField: React.FC<SearchFieldPropsType> = React.memo((props) => {\r\n    return (\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{term: props.term, friend: props.friend}}\r\n            onSubmit={(values) => {\r\n                props.getUsers(1, props.pageSize, values.term, values.friend)\r\n            }}\r\n        >\r\n            <Form>\r\n                <Field type=\"text\" name=\"term\" autoComplete=\"off\"/>\r\n                <Field as=\"select\" name=\"friend\">\r\n                    <option value=\"null\">All</option>\r\n                    <option value=\"true\">Followed</option>\r\n                    <option value=\"false\">Unfollowed</option>\r\n                </Field>\r\n                <button type=\"submit\">find</button>\r\n            </Form>\r\n        </Formik>\r\n    );\r\n})","import React, {useEffect} from \"react\";\r\nimport style from \"./Users.module.css\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {UsersPropsType} from \"./UsersContainer\";\r\nimport {User} from \"./User\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\nimport {SearchField} from \"../common/SearchField/SearchField\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {PATH} from \"../Routes/Routes\";\r\nimport * as querystring from \"querystring\";\r\n\r\ntype QueryObjType = { term?: string, friend?: string, page?: string }\r\nexport const Users: React.FC<UsersPropsType> = React.memo((props) => {\r\n\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = querystring.parse(history.location.search.substr(1)) as QueryObjType\r\n        let actualPage = props.currentPage\r\n        let actualTerm = props.term !== null ? props.term : \"\"\r\n        let actualFriend = props.friend\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n        if (!!parsed.term) actualTerm = parsed.term\r\n        // parsed.term !== \"null\" ? actualTerm = parsed.term as string : actualTerm = \"\"\r\n\r\n        switch (parsed.friend) {\r\n            case \"null\":\r\n                actualFriend = null\r\n                break\r\n            case \"true\":\r\n                actualFriend = true\r\n                break\r\n            case \"false\":\r\n                actualFriend = false\r\n                break\r\n        }\r\n        props.getUsersTC(actualPage, props.pageSize, actualTerm, actualFriend)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryObjType = {}\r\n        if (!!props.term) query.term = props.term\r\n        if (props.friend !== null) query.friend = String(props.friend)\r\n        if (props.currentPage !== 1) query.page = String(props.currentPage)\r\n\r\n        history.push({\r\n            pathname: PATH.USERS,\r\n            search: querystring.stringify(query)\r\n        })\r\n    }, [props.term, props.friend, props.currentPage])\r\n\r\n    return (\r\n        <div className={style.usersPage}>\r\n            <SearchField getUsers={props.getUsersTC}\r\n                         pageSize={props.pageSize}\r\n                         term={props.term}\r\n                         friend={props.friend}\r\n            />\r\n            <Paginator totalCount={props.totalCount}\r\n                       pageSize={props.pageSize}\r\n                       onClickCurrentPage={props.onClickCurrentPage}\r\n                       currentPage={props.currentPage}/>\r\n            {props.isFetching ? <Preloader/>\r\n                : <div className={style.container}>\r\n                    {\r\n                        props.usersPage.map(u => <User key={u.id}\r\n                                                       user={u}\r\n                                                       followingInProgress={props.followingInProgress}\r\n                                                       followTC={props.followTC}\r\n                                                       unFollowTC={props.unFollowTC}/>)\r\n                    }\r\n                </div>}\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n","import {connect} from \"react-redux\";\r\nimport {followTC, getUsersTC, unFollowTC, UserType} from \"../../redux/usersPageReducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {Users} from \"./Users\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype UsersClassContainerPropsType = {\r\n    usersPage: Array<UserType>\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    disableButton: boolean\r\n    followingInProgress: Array<number>\r\n    getUsersTC: (currentPage: number, pageSize: number, term: string |  null, friend: null | boolean) => void\r\n    followTC: (userId: number) => void\r\n    unFollowTC: (userId: number) => void,\r\n    term: null | string\r\n    friend: null | boolean\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    usersPage: Array<UserType>\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    disableButton: boolean\r\n    followingInProgress: Array<number>\r\n    term: null | string\r\n    friend: null | boolean\r\n}\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsersTC: (currentPage: number, pageSize: number, term: string | null, friend: null | boolean) => void\r\n    followTC: (userId: number) => void\r\n    unFollowTC: (userId: number) => void\r\n}\r\n\r\ntype OwnTypeProps = {\r\n    onClickCurrentPage: (page: number) => void\r\n}\r\n\r\nexport type UsersPropsType = MapStatePropsType & MapDispatchPropsType & OwnTypeProps\r\n\r\nclass UsersContainer extends React.PureComponent<UsersClassContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsersTC(this.props.currentPage, this.props.pageSize, \"\", null)\r\n    }\r\n\r\n    onClickCurrentPage = (page: number) => {\r\n        this.props.getUsersTC(page, this.props.pageSize, this.props.term, this.props.friend)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Users {...this.props}\r\n                       onClickCurrentPage={this.onClickCurrentPage}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        usersPage: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalCount: state.usersPage.totalCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n        disableButton: state.usersPage.disableButton,\r\n        term: state.usersPage.filter.term,\r\n        friend: state.usersPage.filter.friend\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps,\r\n        {getUsersTC, followTC, unFollowTC}), withAuthRedirect)(UsersContainer)"],"sourceRoot":""}