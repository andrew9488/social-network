{"version":3,"sources":["components/Login/Login.module.css","components/Login/LoginForm.tsx","components/Login/Login.tsx","components/Login/LoginContainer.tsx"],"names":["module","exports","LoginForm","reduxForm","form","props","style","textAlign","href","target","rel","onSubmit","handleSubmit","className","loginForm","display","alignItems","justifyContent","width","htmlFor","Field","name","type","placeholder","component","Input","validate","required","id","error","captcha","src","alt","Login","React","memo","useCallback","formData","email","password","rememberMe","logInTC","isAuth","to","PATH","PROFILE","loginPage","compose","connect","state","auth"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,UAAY,2B,qIC8DjBC,EAAYC,YACrB,CACIC,KAAM,SAFWD,EA5C8D,SAACE,GACpF,OACI,qCACI,sBAAKC,MAAO,CAACC,UAAW,UAAxB,UACI,yDACI,mBAAGC,KAAM,wCACNC,OAAQ,SAAUC,IAAI,aADzB,sBAIJ,wEACA,0DACA,kDAEJ,uBAAMC,SAAUN,EAAMO,aAAcC,UAAWP,IAAMQ,UAArD,UACI,sBAAKR,MAAO,CAACS,QAAS,OAAQC,WAAY,SAAUC,eAAgB,WAAYC,MAAM,SAAtF,UACI,uBAAOC,QAAQ,QAAf,mBACA,cAACC,EAAA,EAAD,CAAOC,KAAK,QAAQC,KAAK,OAAOC,YAAY,QAAQC,UAAWC,IAAOC,SAAU,CAACC,KAC1EC,GAAG,aAEd,sBAAKtB,MAAO,CAACS,QAAS,OAAQC,WAAY,SAAUC,eAAgB,WAAYC,MAAM,SAAtF,UACI,uBAAOC,QAAQ,WAAf,sBACA,cAACC,EAAA,EAAD,CAAOC,KAAK,WAAWC,KAAK,WAAWC,YAAY,WAAWC,UAAWC,IAClEC,SAAU,CAACC,KAAWC,GAAG,gBAEpC,qBAAKf,UAAWP,IAAMuB,MAAtB,SACKxB,EAAMwB,QAEX,sBAAKvB,MAAO,CAACS,QAAS,QAAtB,UACI,cAACK,EAAA,EAAD,CAAOC,KAAK,aAAaC,KAAK,WAAWE,UAAWC,MAAQ,kDAE/DpB,EAAMyB,SACP,gCACI,qBAAKC,IAAK1B,EAAMyB,QAASE,IAAI,YAC7B,cAACZ,EAAA,EAAD,CAAOC,KAAK,UAAUC,KAAK,OAAOE,UAAWC,IAAOC,SAAU,CAACC,UAGnE,8BACI,wBAAQL,KAAK,SAAb,+B,kCCjDPW,EAAkCC,IAAMC,MAAK,SAAC9B,GAEvD,IAAMM,EAAWyB,uBAAY,SAACC,GAA4B,IAC/CC,EAAwCD,EAAxCC,MAAOC,EAAiCF,EAAjCE,SAAUC,EAAuBH,EAAvBG,WAAYV,EAAWO,EAAXP,QACpCzB,EAAMoC,QAAQH,EAAOC,EAAUC,EAAYV,KAC5C,CAACzB,IAEJ,OAAIA,EAAMqC,OACC,cAAC,IAAD,CAAUC,GAAE,UAAKC,IAAKC,QAAV,eAInB,sBAAKhC,UAAWP,IAAMwC,UAAtB,UACI,uCACA,cAAC5C,EAAD,CAAWS,SAAUA,EAAUmB,QAASzB,EAAMyB,gB,QCI3CiB,sBACXC,aAVoB,SAACC,GACrB,MAAO,CACHP,OAAQO,EAAMC,KAAKR,OACnBZ,QAASmB,EAAMC,KAAKpB,WAO4D,CAACW,cAD1EM,CACqFd","file":"static/js/6.939565d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"Login_loginPage__1F-A9\"};","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/Form/CustomField\";\r\nimport {required} from \"../../utils/validator\";\r\nimport style from \"../common/Form/CustomField.module.css\";\r\n\r\ntype FormPropsType = {\r\n    captcha: string | null\r\n}\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string | null\r\n}\r\n\r\n//style in CustomField.module.css\r\n\r\nconst Form: React.FC<InjectedFormProps<FormDataType, FormPropsType> & FormPropsType> = (props) => {\r\n    return (\r\n        <>\r\n            <div style={{textAlign: \"center\"}}>\r\n                <p>To log in get registered\r\n                    <a href={'https://social-network.samuraijs.com/'}\r\n                       target={'_blank'} rel=\"noreferrer\"> here\r\n                    </a>\r\n                </p>\r\n                <p>or use common test account credentials:</p>\r\n                <p>Email: free@samuraijs.com</p>\r\n                <p>Password: free</p>\r\n            </div>\r\n            <form onSubmit={props.handleSubmit} className={style.loginForm}>\r\n                <div style={{display: \"flex\", alignItems: \"center\", justifyContent: \"flex-end\", width:\"250px\"}}>\r\n                    <label htmlFor=\"email\">Email</label>\r\n                    <Field name=\"email\" type=\"text\" placeholder=\"login\" component={Input} validate={[required]}\r\n                           id=\"email\"/>\r\n                </div>\r\n                <div style={{display: \"flex\", alignItems: \"center\", justifyContent: \"flex-end\", width:\"250px\"}}>\r\n                    <label htmlFor=\"password\">Password</label>\r\n                    <Field name=\"password\" type=\"password\" placeholder=\"password\" component={Input}\r\n                           validate={[required]} id=\"password\"/>\r\n                </div>\r\n                <div className={style.error}>\r\n                    {props.error}\r\n                </div>\r\n                <div style={{display: \"flex\"}}>\r\n                    <Field name=\"rememberMe\" type=\"checkbox\" component={Input}/><span>remember me</span>\r\n                </div>\r\n                {props.captcha &&\r\n                <div>\r\n                    <img src={props.captcha} alt=\"captcha\"/>\r\n                    <Field name=\"captcha\" type=\"text\" component={Input} validate={[required]}/>\r\n                </div>\r\n                }\r\n                <div>\r\n                    <button type=\"submit\">Submit</button>\r\n                </div>\r\n\r\n            </form>\r\n        </>\r\n    );\r\n}\r\nexport const LoginForm = reduxForm<FormDataType, FormPropsType>(\r\n    {\r\n        form: \"login\"\r\n    })(Form)","import React, {useCallback} from \"react\"\r\nimport {FormDataType, LoginForm} from \"./LoginForm\";\r\nimport style from \"./Login.module.css\"\r\nimport {LoginPropsType} from \"./LoginContainer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../Routes/Routes\";\r\n\r\nexport const Login: React.FC<LoginPropsType> = React.memo((props) => {\r\n\r\n    const onSubmit = useCallback((formData: FormDataType) => {\r\n        const {email, password, rememberMe, captcha} = formData\r\n        props.logInTC(email, password, rememberMe, captcha)\r\n    }, [props])\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={`${PATH.PROFILE}/:userId?`}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.loginPage}>\r\n            <h2>login</h2>\r\n            <LoginForm onSubmit={onSubmit} captcha={props.captcha}/>\r\n        </div>\r\n    )\r\n})","import {ComponentType} from \"react\"\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {Login} from \"./Login\";\r\nimport {logInTC} from \"../../redux/authReducer\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    captcha: string | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    logInTC: (email: string | null, password: string | null, rememberMe: boolean, captcha: string | null) => void\r\n}\r\n\r\nconst MapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captcha: state.auth.captcha\r\n    }\r\n}\r\n\r\nexport type LoginPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nexport default compose<ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(MapStateToProps, {logInTC}))(Login)"],"sourceRoot":""}